definitions:
  dto.AuthRequest:
    properties:
      password:
        example: secret
        type: string
      username:
        example: johndoe
        type: string
    type: object
  dto.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.CoinTransactionDTO:
    properties:
      total_amount:
        type: integer
      username:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      errors:
        example: error description
        type: string
    type: object
  dto.InfoResponse:
    properties:
      coin_history:
        $ref: '#/definitions/dto.TransactionDTO'
      coins:
        example: 100000
        type: integer
      inventory:
        items:
          $ref: '#/definitions/dto.PurchaseDTO'
        type: array
    type: object
  dto.PurchaseDTO:
    properties:
      amount:
        type: integer
      merch:
        type: string
    type: object
  dto.SendCoinRequest:
    properties:
      amount:
        example: 100
        type: integer
      from_user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      to_user_id:
        example: 123e4567-e89b-12d3-a456-426614174001
        type: string
    type: object
  dto.TransactionDTO:
    properties:
      received:
        items:
          $ref: '#/definitions/dto.CoinTransactionDTO'
        type: array
      sent:
        items:
          $ref: '#/definitions/dto.CoinTransactionDTO'
        type: array
    type: object
info:
  contact: {}
paths:
  /api/auth:
    post:
      consumes:
      - application/json
      description: При первой аутентификации пользователь создается автоматически.
      parameters:
      - description: Данные для аутентификации
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/dto.AuthResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Аутентификация и получение JWT-токена
      tags:
      - auth
  /api/buy/{item}:
    get:
      description: Покупает указанный предмет за монеты пользователя.
      parameters:
      - description: Название предмета
        in: path
        name: item
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Предмет куплен успешно
          schema:
            type: string
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Купить предмет за монеты
      tags:
      - user
  /api/info:
    get:
      description: Возвращает баланс монет, инвентарь (купленные товары) и историю
        переводов монет.
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/dto.InfoResponse'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Получить информацию о монетах, инвентаре и истории транзакций
      tags:
      - user
  /api/sendCoins:
    post:
      consumes:
      - application/json
      description: Выполняет перевод монет от одного пользователя к другому.
      parameters:
      - description: Данные для перевода
        in: body
        name: transfer
        required: true
        schema:
          $ref: '#/definitions/dto.SendCoinRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Монеты успешно переведены
          schema:
            type: string
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизован
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Отправить монеты другому пользователю
      tags:
      - user
swagger: "2.0"
